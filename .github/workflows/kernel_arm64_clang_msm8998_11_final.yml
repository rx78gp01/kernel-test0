# Build kernel using GitHub Actions

name: Build kernel arm64 clang chiron 11 final

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/rx78gp01/android_kernel_xiaomi_msm8998.git
  REPO_BRANCH: lineage-18.1_new
  REPO_BRANCH_VER: 11.0.0
  REPO_TAG: lineage-18.1_new
  ARCH: arm64
  DEVICE_NAME: chiron
  DEFCONFIG: chiron_defconfig
  REPO_DEPTH: 1
  CACHE_OUT: 0
  NEW_COMMIT: 0
  FETCH_DEPTH: 100
  TOOLCHAIN_URL: https://github.com/rx78gp01/toolchain.git
  TOOLCHAIN_BRANCH: clang13
  TOOLCHAIN_CLANG_URL: https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b.git
  TOOLCHAIN_CLANG_BRANCH: lineage-20.0
  KERNEL_NAME: Image.gz-dtb
  AK_NAME: AnyKernel3-chiron-11.0.0
  DTB: 0
  DTB_PATH: dts
  DTBO: 0
  FILES_PATH: files_chiron11
  PATCHES_PATH: patches_chiron
  UPLOAD_RELEASE: true
  USE_CCACHE: false
  TZ: UTC

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 1

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential ccache ecj fastjar file g++ gawk \
        gettext git java-propose-classpath libelf-dev libncurses5-dev \
        libncursesw5-dev libssl-dev python python2.7-dev python3 unzip wget \
        python3-distutils python3-setuptools python3-dev rsync subversion \
        swig time xsltproc zlib1g-dev libboost-dev zip git-restore-mtime \
        gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib \
        libc6-dev lib32ncurses5-dev x11proto-core-dev libx11-dev tree \
        lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc bc lib32readline-dev \
        lib32z1-dev liblz4-tool libsdl1.2-dev libwxgtk3.0-gtk3-dev \
        libxml2 lzop pngcrush schedtool squashfs-tools imagemagick libbz2-dev \
        lzma ncftp qemu-user-static libstdc++-10-dev
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone kernel source code
      working-directory: /workdir
      run: |
        [ $REPO_DEPTH -ge 1 ] && git clone --depth $REPO_DEPTH --branch $REPO_BRANCH --single-branch $REPO_URL kernel
        [ $REPO_DEPTH -eq 0 ] && git clone --branch $REPO_TAG --single-branch $REPO_URL kernel
        ln -sf /workdir/kernel $GITHUB_WORKSPACE/kernel
        cd kernel
        git fetch --depth=${FETCH_DEPTH}
        git restore-mtime
        [ $CACHE_OUT -ge 1 ] && [ $NEW_COMMIT -ge 1 ] && git reset --hard HEAD~${NEW_COMMIT} && git pull
        echo "Clone Completed"

    - name: Cache kernel toolchain
      id: cache-kernel-toolchain
      uses: rx78gp01/cache@main
      env:
        cache-name: cache-kernel
      with:
        path: |
          kernel/toolchain
          kernel/out
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.DEVICE_NAME }}-${{ env.REPO_BRANCH }}-${{ env.REPO_BRANCH_VER }}
#        restore-keys: |
#          ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.DEVICE_NAME }}-${{ env.REPO_BRANCH }}
    
    - name: Check cache
      run: |
        [ -d kernel/toolchain ] && echo "Found toolchain cache" || echo "No toolchain cache"
        [ -d kernel/out ] && echo "Found kernel cache" || echo "No kernel cache"
        ls -al kernel

    - name: Clone toolchain
      if: steps.cache-kernel-toolchain.outputs.cache-hit != 'true'
      working-directory: /workdir
      run: |
        cd kernel
        git clone --depth 1 --branch $TOOLCHAIN_BRANCH --single-branch $TOOLCHAIN_URL toolchain
        cd toolchain
        git clone --depth 1 --branch $TOOLCHAIN_CLANG_BRANCH --single-branch $TOOLCHAIN_CLANG_URL clang

    - name: Apply patches
      run: |
        [ -d $PATCHES_PATH ] && mv $PATCHES_PATH kernel/$PATCHES_PATH
        cd kernel
        [ -d $PATCHES_PATH ] && for FILE in $(ls $PATCHES_PATH | grep .patch); do git apply --check $PATCHES_PATH/$FILE; git apply $PATCHES_PATH/$FILE; done
        git status -s

    - name: Load custom files
      run: |
        [ -d $FILES_PATH ] && mv $FILES_PATH kernel/files
        cd kernel && git status -s

    - name: Setup ccache
      uses: Chocobo1/setup-ccache-action@v1
      if: env.USE_CCACHE == 'true'
      with:
          install_ccache: false
          update_packager_index: false

    - name: Compile the kernel
      id: compile
      run: |
        export SUBARCH=arm64
        export CLANG_PREBUILT_BIN=/workdir/kernel/toolchain/clang/bin/
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=/workdir/kernel/toolchain/aarch64-linux-android-4.9/bin/aarch64-linux-android-
        export CROSS_COMPILE_ARM32=/workdir/kernel/toolchain/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-
        export PATH=${CLANG_PREBUILT_BIN}:${PATH}
        export LLVM=1
        cd kernel
        [ -f out/.version ] && rm out/.version && [ $CACHE_OUT -eq 0 ] && make O=out clean
        [ ! -d out ] && mkdir out
        make O=out ARCH=${ARCH} ${DEFCONFIG}
        echo -e "Available core: $(nproc)"
        COMPILE_THREADS=$(($(nproc) + 1))
        echo "Compile threads: ${COMPILE_THREADS}"
        make O=out ARCH=${ARCH} CC=clang AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip -j${COMPILE_THREADS} 2>&1 | tee build.log  \
        || make O=out ARCH=${ARCH} CC=clang AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip -j1 2>&1 | tee build_j1.log
        [ -f out/arch/${ARCH}/boot/${KERNEL_NAME} ] && echo "status=success" >> $GITHUB_OUTPUT
        [ ! -d release ] && mkdir release
        cd out
        zip -q ../release/log.zip ../build.log ../build_j1.log .config
        zip -9 -q ../release/vmlinux_debug.zip vmlinux
        mv arch/${ARCH}/boot/${KERNEL_NAME} ../release/${KERNEL_NAME}
        [ $DTB -ge 1 ] && [ -f arch/${ARCH}/boot/${DTB_PATH} ] && mv arch/${ARCH}/boot/${DTB_PATH} ../release/dtb
        [ $DTBO -ge 1 ] && [ -f mv arch/${ARCH}/boot/dtbo.img ] && mv arch/${ARCH}/boot/dtbo.img ../release/dtbo.img
        rm vmlinux
        rm vmlinux.o
        rm .tmp_vmlinux1
        rm .tmp_vmlinux2
        echo "Make Completed"

    - name: Prepare release
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        touch release.txt
        echo "Branch: $REPO_BRANCH" >> release.txt
        echo "Version: $REPO_BRANCH_VER" >> release.txt
        echo "TAG: $REPO_TAG" >> release.txt
        echo "Date: $(date +"%Y-%m-%d_%H:%M")" >> release.txt
        echo "Arch: $ARCH" >> release.txt
        echo "Deivce: $DEVICE_NAME" >> release.txt
        cd kernel/release/
        echo "KERNEL_PATH=$PWD" >> $GITHUB_ENV
        sha256sum -b ${KERNEL_NAME} >> sha256sums
        [ $DTB -ge 1 ] && sha256sum -b dtb >> sha256sums
        [ $DTBO -ge 1 ] && sha256sum -b dtbo.img >> sha256sums
        export BUILD_DATE=$(date +"%Y%m%d")
        [ -f ../files/${AK_NAME}.zip ] &&  zip -9 -o -q -UN=UTF8 -X ../files/${AK_NAME}.zip ${KERNEL_NAME} dtb dtbo.img \
        && mv ../files/${AK_NAME}.zip ${AK_NAME}-${BUILD_DATE}.zip \
        && sha256sum -b ${AK_NAME}-${BUILD_DATE}.zip >> sha256sums || echo "No AK"

    - name: Upload release
      uses: softprops/action-gh-release@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.DEVICE_NAME }}_${{ env.REPO_BRANCH_VER}}_${{ env.REPO_BRANCH}}
        body_path: release.txt
        files: |
            ${{ env.KERNEL_PATH }}/*
